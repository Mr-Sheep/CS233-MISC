module sequence3(o, i, clock, reset);

  input i;             // data input
  input clock, reset;  // synchronizing inputs

  output o;

  // Declare one wire per current state variable.
  // We recommend the naming convention of starting with
  // the letter 's' followed by a meaningful name
  // to help you know that the wire is for a state

  wire sStart, sA, sB, sC; 

  // Declare one wire per next-state variable
  // Each next-state wire should match the Boolean expression derived from the next-state table
  // The reset signal is synchronously resetting the FSM to the sEven state
  // The Boolean expression for your start state should be OR'd with reset. 
  // All other states' Boolean expressions should be AND'd with ~reset.

  wire sStart_next = ((sC & ~i) | (sStart & ~i)) | reset; // FINISH THIS LINE
  // DERIVE A BOOLEAN EXPRESSION FOR EACH NEXT STATE EXPRESSION 
  // BASED ON THE STATE AND INPUTS
  // FINISH THE REST OF THE NEXT STATES

  wire sA_next = ((sStart & i) | (sB & i) | (sC & i) | (sA & i)) & ~reset;
  wire sB_next = ((sA & ~i)) & ~reset;
  wire sC_next = ((sB & ~i)) & ~reset;

  // dffe stands for d flip-flop with enable
  // dffe module is defined below
  // The reset of the flip-flop is asynchronous, set it to 0
  
  dffe fsStart(sStart, sStart_next, clock, 1'b1, 1'b0);
  dffe fsA(sA, sA_next, clock, 1'b1, 1'b0);
  dffe fsB(sB, sB_next, clock, 1'b1, 1'b0);
  dffe fsC(sC, sC_next, clock, 1'b1, 1'b0);


  // FINISH THE REST OF THE FLIP-FLOP MODULES

  // Set the output to be equal to the OR of all states that output 1
  assign o = sC;// FINISH THIS LINE
  // DERIVE A BOOLEAN EXPRESSION FOR THE OUTPUT BASED ON THE STATE
endmodule // end odd_counter

// dffe: D-type flip-flop with enable
//
// q      (output) - Current value of flip flop
// d      (input)  - Next value of flip flop
// clk    (input)  - Clock (positive edge-sensitive)
// enable (input)  - Load new value? (yes = 1, no = 0)
// reset  (input)  - Asynchronous reset   (reset =  1)
//
module dffe(q, d, clk, enable, reset);
   output q;
   reg    q;
   input  d;
   input  clk, enable, reset;

   always@(reset)
     if (reset == 1'b1)
       q <= 0;

   always@(posedge clk)
     if ((reset == 1'b0) && (enable == 1'b1))
       q <= d;
endmodule // dffe